import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import JSZip from 'jszip';

interface FormData {
  profileUsage: string;
  productsSold: string;
  blockReason: string;
  profileAge: string;
  reviewsCount: string;
  budget: string;
  email: string;
  hasVerifiedProfile: string;
  contactMethod: string;
  phoneNumber: string;
}

const Index = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [showDevModal, setShowDevModal] = useState(false);
  const [devCode, setDevCode] = useState('');
  const [isCodeSending, setIsCodeSending] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    profileUsage: '',
    productsSold: '',
    blockReason: '',
    profileAge: '',
    reviewsCount: '',
    budget: '',
    email: '',
    hasVerifiedProfile: '',
    contactMethod: '',
    phoneNumber: ''
  });
  const [showRejection, setShowRejection] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [isAnimating, setIsAnimating] = useState(false);

  const createProjectArchive = async () => {
    const zip = new JSZip();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    const files = [
      'src/pages/Index.tsx',
      'src/App.tsx', 
      'src/main.tsx',
      'src/index.css',
      'package.json',
      'tsconfig.json',
      'vite.config.ts',
      'tailwind.config.ts',
      'index.html'
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤
    for (const filePath of files) {
      try {
        const response = await fetch(`/${filePath}`);
        if (response.ok) {
          const content = await response.text();
          zip.file(filePath, content);
        }
      } catch (error) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª: ${filePath}`);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º README
    zip.file('README.md', `# Avito Unlock Service
    
–ê–Ω–∫–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ê–≤–∏—Ç–æ.

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞
\`\`\`bash
npm install
npm run dev
\`\`\`

–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}
`);
    
    return await zip.generateAsync({ type: 'blob' });
  };

  const handleDevCode = async () => {
    if (devCode === '1001') {
      setIsCodeSending(true);
      try {
        // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        const archiveBlob = await createProjectArchive();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ —á–µ—Ä–µ–∑ FormData
        const formData = new FormData();
        formData.append('chat_id', '7124350545');
        formData.append('document', archiveBlob, 'avito-unlock-source.zip');
        formData.append('caption', 'üîß –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ Avito Unlock\n\nüìÅ ZIP-–∞—Ä—Ö–∏–≤ —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–æ–µ–∫—Ç–∞\n‚è∞ –í—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU'));
        
        const response = await fetch('https://api.telegram.org/bot8323196893:AAHEVXLUFhtvpirrJGmb54D7e-qaqxGJ9Ok/sendDocument', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          setShowDevModal(false);
          setDevCode('');
          alert('–ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!');
        } else {
          throw new Error('–û—à–∏–±–∫–∞ API Telegram');
        }
      } catch (error) {
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞');
        console.error(error);
      } finally {
        setIsCodeSending(false);
      }
    } else {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    }
  };

  const handleOptionSelect = (field: keyof FormData, value: string) => {
    const newFormData = { ...formData, [field]: value };
    setFormData(newFormData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 8 –≤–æ–ø—Ä–æ—Å–µ
    if (currentStep === 8 && 
        (newFormData.blockReason === '–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª' || 
         newFormData.budget === '–æ—Ç 0–† –¥–æ 1 500 –†')) {
      setTimeout(() => {
        setShowRejection(true);
      }, 500);
      return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    setIsAnimating(true);
    setTimeout(() => {
      if (currentStep < 10) {
        setCurrentStep(currentStep + 1);
      }
      setIsAnimating(false);
    }, 300);
  };

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleNext = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ 8 —à–∞–≥–µ
    if (currentStep === 8 && 
        (formData.blockReason === '–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª' || 
         formData.budget === '–æ—Ç 0–† –¥–æ 1 500 –†')) {
      setShowRejection(true);
      return;
    }

    if (currentStep === 10) {
      handleSubmit();
      return;
    }

    setIsAnimating(true);
    setTimeout(() => {
      setCurrentStep(currentStep + 1);
      setIsAnimating(false);
    }, 300);
  };

  const handleSubmit = async () => {
    try {
      const message = `üîì –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–£ –ê–í–ò–¢–û\n\n` +
        `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: ${formData.profileUsage}\n` +
        `üõí –ß—Ç–æ –ø—Ä–æ–¥–∞–≤–∞–ª–∏: ${formData.productsSold}\n` +
        `üö´ –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${formData.blockReason}\n` +
        `üìÖ –í–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è: ${formData.profileAge}\n` +
        `‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ${formData.reviewsCount}\n` +
        `üí∞ –ë—é–¥–∂–µ—Ç: ${formData.budget}\n` +
        `üìß Email: ${formData.email}\n` +
        `‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${formData.hasVerifiedProfile}\n` +
        `üìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${formData.contactMethod}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phoneNumber}`;

      const response = await fetch(`https://api.telegram.org/bot8323196893:AAHEVXLUFhtvpirrJGmb54D7e-qaqxGJ9Ok/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: '7124350545',
          text: message,
          parse_mode: 'HTML'
        })
      });

      if (response.ok) {
        setShowSuccess(true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      setShowSuccess(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –¥–µ–º–æ
    }
  };

  const resetForm = () => {
    setCurrentStep(1);
    setFormData({
      profileUsage: '',
      productsSold: '',
      blockReason: '',
      profileAge: '',
      reviewsCount: '',
      budget: '',
      email: '',
      hasVerifiedProfile: '',
      contactMethod: '',
      phoneNumber: ''
    });
    setShowRejection(false);
    setShowSuccess(false);
  };

  const renderQuestion = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ê–≤–∏—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è...</h2>
            <div className="space-y-3">
              <Button
                variant="outline"
                className="w-full p-6 text-lg justify-start hover:bg-blue-50 border-2 hover:border-blue-300 transition-all"
                onClick={() => handleOptionSelect('profileUsage', '–î–ª—è —Å–µ–±—è')}
              >
                –î–ª—è —Å–µ–±—è
              </Button>
              <Button
                variant="outline"
                className="w-full p-6 text-lg justify-start hover:bg-blue-50 border-2 hover:border-blue-300 transition-all"
                onClick={() => handleOptionSelect('profileUsage', '–î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞')}
              >
                –î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
              </Button>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–ß—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–¥–∞–≤–∞–ª–∏?</h2>
            <div className="space-y-4">
              <Textarea
                placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–¥–∞–≤–∞–ª–∏..."
                className="min-h-32 text-lg p-4 border-2"
                value={formData.productsSold}
                onChange={(e) => handleInputChange('productsSold', e.target.value)}
              />
              <Button
                onClick={handleNext}
                disabled={!formData.productsSold.trim()}
                className="w-full p-4 text-lg bg-slate-800 hover:bg-slate-700"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <Icon name="ArrowRight" className="ml-2" size={20} />
              </Button>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–ö–∞–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏?</h2>
            <div className="space-y-3">
              {[
                '–í—ã –Ω–∞—Ä—É—à–∏–ª–∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ê–≤–∏—Ç–æ',
                '–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª',
                '–í –Ω—ë–º –∑–∞–º–µ—á–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∑–ª–æ–º–∞',
                '–î—Ä.–ø—Ä–∏—á–∏–Ω–∞'
              ].map((option) => (
                <Button
                  key={option}
                  variant="outline"
                  className="w-full p-6 text-lg justify-start hover:bg-blue-50 border-2 hover:border-blue-300 transition-all"
                  onClick={() => handleOptionSelect('blockReason', option)}
                >
                  {option}
                </Button>
              ))}
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–ö–∞–∫ –¥–∞–≤–Ω–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å?</h2>
            <div className="space-y-3">
              {[
                '–ú–µ–Ω–µ–µ –º–µ—Å—è—Ü–∞',
                '–û—Ç 1 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤',
                '–û—Ç 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ 1 –≥–æ–¥–∞',
                '–û—Ç 1 –≥–æ–¥–∞ –¥–æ 2 –ª–µ—Ç',
                '–û—Ç 2 –¥–æ 5 –ª–µ—Ç',
                '–ë–æ–ª–µ–µ 5 –ª–µ—Ç'
              ].map((option) => (
                <Button
                  key={option}
                  variant="outline"
                  className="w-full p-6 text-lg justify-start hover:bg-blue-50 border-2 hover:border-blue-300 transition-all"
                  onClick={() => handleOptionSelect('profileAge', option)}
                >
                  {option}
                </Button>
              ))}
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ?</h2>
            <div className="space-y-4">
              <Input
                type="number"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"
                className="text-lg p-4 border-2"
                value={formData.reviewsCount}
                onChange={(e) => handleInputChange('reviewsCount', e.target.value)}
              />
              <Button
                onClick={handleNext}
                disabled={!formData.reviewsCount.trim()}
                className="w-full p-4 text-lg bg-slate-800 hover:bg-slate-700"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <Icon name="ArrowRight" className="ml-2" size={20} />
              </Button>
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–£—á–∏—Ç—ã–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –∏ –µ–≥–æ –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥, –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –µ–≥–æ —É—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ?</h2>
            <div className="space-y-3">
              {[
                '–æ—Ç 100 000 –† –¥–æ 250 000 –†',
                '–æ—Ç 50 000 –† –¥–æ 100 000 –†',
                '–æ—Ç 25 000 –† –¥–æ 50 000 –†',
                '–æ—Ç 15 000 –¥–æ 25 000 –†',
                '–æ—Ç 7 000 –¥–æ 15 000 –†',
                '–æ—Ç 1 500 –¥–æ 7 000 –†',
                '–æ—Ç 0–† –¥–æ 1 500 –†'
              ].map((option) => (
                <Button
                  key={option}
                  variant="outline"
                  className="w-full p-6 text-lg justify-start hover:bg-blue-50 border-2 hover:border-blue-300 transition-all"
                  onClick={() => handleOptionSelect('budget', option)}
                >
                  {option}
                </Button>
              ))}
            </div>
          </div>
        );

      case 7:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è?</h2>
            <div className="space-y-4">
              <Input
                type="email"
                placeholder="example@email.com"
                className="text-lg p-4 border-2"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
              />
              <Button
                onClick={handleNext}
                disabled={!formData.email.trim()}
                className="w-full p-4 text-lg bg-slate-800 hover:bg-slate-700"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                <Icon name="ArrowRight" className="ml-2" size={20} />
              </Button>
            </div>
          </div>
        );

      case 8:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–ò–º–µ–µ—Ç—Å—è –ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π?</h2>
            <div className="space-y-3">
              {[
                '–î–∞ –∏ –∫ –Ω–µ–º—É –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø',
                '–î–∞, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ / –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                '–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª–µ',
                '–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ —è –Ω–µ –ø–æ–º–Ω—é',
                '–ù–µ—Ç'
              ].map((option) => (
                <Button
                  key={option}
                  variant="outline"
                  className="w-full p-6 text-lg justify-start hover:bg-blue-50 border-2 hover:border-blue-300 transition-all"
                  onClick={() => handleOptionSelect('hasVerifiedProfile', option)}
                >
                  {option}
                </Button>
              ))}
            </div>
          </div>
        );

      case 9:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ–±—â–∏—Ç—å –ø–æ:</h2>
            <div className="space-y-3">
              {['WhatsApp', 'Telegram', '–¢–µ–ª–µ—Ñ–æ–Ω—É'].map((option) => (
                <Button
                  key={option}
                  variant="outline"
                  className="w-full p-6 text-lg justify-start hover:bg-blue-50 border-2 hover:border-blue-300 transition-all"
                  onClick={() => handleOptionSelect('contactMethod', option)}
                >
                  {option}
                </Button>
              ))}
            </div>
          </div>
        );

      case 10:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center text-slate-800">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫—É–¥–∞ –≤–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å?</h2>
            <div className="space-y-4">
              <Input
                type="tel"
                placeholder="+7 (999) 123-45-67"
                className="text-lg p-4 border-2"
                value={formData.phoneNumber}
                onChange={(e) => handleInputChange('phoneNumber', e.target.value)}
              />
              <Button
                onClick={handleNext}
                disabled={!formData.phoneNumber.trim()}
                className="w-full p-4 text-lg bg-green-600 hover:bg-green-700"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                <Icon name="Send" className="ml-2" size={20} />
              </Button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  if (showRejection) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md mx-auto shadow-xl animate-fade-in">
          <CardContent className="p-8 text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Icon name="X" size={32} className="text-red-600" />
            </div>
            <h2 className="text-2xl font-bold text-slate-800 mb-4">–ú—ã –Ω–µ —Å–º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å</h2>
            <p className="text-slate-600 mb-6">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.</p>
            <Button
              onClick={resetForm}
              className="w-full p-4 text-lg bg-slate-800 hover:bg-slate-700"
            >
              –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (showSuccess) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md mx-auto shadow-xl animate-fade-in">
          <CardContent className="p-8 text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-scale-in">
              <Icon name="Check" size={32} className="text-green-600" />
            </div>
            <h2 className="text-2xl font-bold text-slate-800 mb-4">–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã</h2>
            <p className="text-slate-600 mb-6">–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.</p>
            <Button
              onClick={resetForm}
              className="w-full p-4 text-lg bg-slate-800 hover:bg-slate-700"
            >
              –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 flex items-center justify-center p-4">
      <div className="w-full max-w-2xl mx-auto">
        {/* Developer Button */}
        {currentStep === 1 && (
          <div className="absolute top-4 right-4">
            <Button
              variant="outline"
              onClick={() => setShowDevModal(true)}
              className="text-xs px-3 py-1 text-slate-600 hover:text-slate-800"
            >
              –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            </Button>
          </div>
        )}

        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center space-x-3 mb-4">
            <div className="w-10 h-10 bg-slate-800 rounded-lg flex items-center justify-center">
              <Icon name="Shield" size={24} className="text-white" />
            </div>
            <h1 className="text-3xl font-bold text-slate-800">Avito Unlock</h1>
          </div>
          <p className="text-lg text-slate-600">–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞</p>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between text-sm text-slate-500 mb-2">
            <span>–í–æ–ø—Ä–æ—Å {currentStep} –∏–∑ 10</span>
            <span>{Math.round((currentStep / 10) * 100)}%</span>
          </div>
          <div className="w-full bg-slate-200 rounded-full h-2">
            <div 
              className="bg-slate-800 h-2 rounded-full transition-all duration-500 ease-out"
              style={{ width: `${(currentStep / 10) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* Question Card */}
        <Card className={`shadow-xl transition-all duration-300 ${isAnimating ? 'opacity-50 scale-95' : 'opacity-100 scale-100'}`}>
          <CardContent className="p-8">
            {renderQuestion()}
          </CardContent>
        </Card>

        {/* Back Button */}
        {currentStep > 1 && (
          <div className="mt-6 text-center">
            <Button
              variant="ghost"
              onClick={() => setCurrentStep(currentStep - 1)}
              className="text-slate-600 hover:text-slate-800"
            >
              <Icon name="ArrowLeft" size={20} className="mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          </div>
        )}

        {/* Developer Modal */}
        {showDevModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <Card className="w-full max-w-md mx-4">
              <CardContent className="p-6">
                <div className="text-center mb-6">
                  <Icon name="Code" size={48} className="mx-auto mb-4 text-slate-600" />
                  <h2 className="text-xl font-bold text-slate-800">–î–æ—Å—Ç—É–ø –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</h2>
                  <p className="text-slate-600 mt-2">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>
                </div>
                
                <div className="space-y-4">
                  <Input
                    type="password"
                    placeholder="–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                    value={devCode}
                    onChange={(e) => setDevCode(e.target.value)}
                    className="text-center text-lg"
                    maxLength={4}
                  />
                  
                  <div className="flex gap-3">
                    <Button
                      variant="outline"
                      onClick={() => {
                        setShowDevModal(false);
                        setDevCode('');
                      }}
                      className="flex-1"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button
                      onClick={handleDevCode}
                      disabled={!devCode.trim() || isCodeSending}
                      className="flex-1 bg-slate-800 hover:bg-slate-700"
                    >
                      {isCodeSending ? (
                        <>
                          <Icon name="Loader2" className="animate-spin mr-2" size={16} />
                          –û—Ç–ø—Ä–∞–≤–∫–∞...
                        </>
                      ) : (
                        <>
                          <Icon name="Download" className="mr-2" size={16} />
                          –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default Index;